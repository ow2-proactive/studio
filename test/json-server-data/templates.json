{
  "templates": [
    {
      "id": 2,
      "name": "Selection Scripts",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.2\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.2 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.2/schedulerjob.xsd\"\r\n    name=\"Selection Scripts\" projectName=\"Basic Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"false\">\r\n  <description>\r\n    <![CDATA[ A selection script allows you to programmatically select a node to execute a given task.        The script will be executed on nodes and should set the variable 'selected' to true to mark it as        eligible for the task execution. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"run_only_on_linux\">\r\n      <selection>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nimport org.ow2.proactive.scripting.helper.selection.SelectionUtils\r\n\r\n                        selected = SelectionUtils.checkOSName(\"linux\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </selection>\r\n      <nativeExecutable>\r\n        <staticCommand value=\"uname\" >\r\n          <arguments>\r\n            <argument value=\"-a\"/>\r\n          </arguments>\r\n        </staticCommand>\r\n      </nativeExecutable>\r\n    </task>\r\n    <task name=\"run_only_on_windows\">\r\n      <selection>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nimport org.ow2.proactive.scripting.helper.selection.SelectionUtils\r\n\r\n                        selected = SelectionUtils.checkOSName(\"windows\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </selection>\r\n      <nativeExecutable>\r\n        <staticCommand value=\"cmd.exe\" >\r\n          <arguments>\r\n            <argument value=\"/c\"/>\r\n            <argument value=\"ver\"/>\r\n          </arguments>\r\n        </staticCommand>\r\n      </nativeExecutable>\r\n    </task>\r\n    <task name=\"run_only_on_mac\">\r\n      <selection>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nimport org.ow2.proactive.scripting.helper.selection.SelectionUtils\r\n\r\n                        selected = SelectionUtils.checkOSName(\"mac\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </selection>\r\n      <nativeExecutable>\r\n        <staticCommand value=\"sw_vers\" ></staticCommand>\r\n      </nativeExecutable>\r\n    </task>\r\n  </taskFlow>\r\n</job>",
      "metadata": "{\"offsets\":{\"run_only_on_linux\":{\"top\":547,\"left\":858},\"run_only_on_windows\":{\"top\":547,\"left\":986},\"run_only_on_mac\":{\"top\":547,\"left\":1114}},\"project\":\"Basic Workflows\"}"
    },
    {
      "id": 7,
      "name": "MPI Job",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.2\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.2 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.2/schedulerjob.xsd\"\r\n    name=\"MPI Job\" projectName=\"Advanced Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"false\">\r\n  <description>\r\n    <![CDATA[ A multinode task will reserve several nodes and expose them to the task.        It is often used to run MPI jobs or task that use the ProActive Java API. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"MPI_task\">\r\n      <parallel numberOfNodes=\"4\"></parallel>\r\n      <nativeExecutable>\r\n        <staticCommand value=\"mpirun\" >\r\n          <arguments>\r\n            <argument value=\"-hostfile\"/>\r\n            <argument value=\"$NODESFILE\"/>\r\n            <argument value=\"hostname\"/>\r\n          </arguments>\r\n        </staticCommand>\r\n      </nativeExecutable>\r\n    </task>\r\n  </taskFlow>\r\n</job>",
      "metadata": "{\"offsets\":{\"MPI_task\":{\"top\":374.5,\"left\":986}},\"project\":\"Advanced Workflows\"}"
    },
    {
      "id": 4,
      "name": "Distributed Computation",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.2\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.2 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.2/schedulerjob.xsd\"\r\n    name=\"Distributed Computation\" projectName=\"Big Data Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"true\">\r\n  <description>\r\n    <![CDATA[ Computing PI according to MonteCarlo method. This job will launch 6 MonteCarlo tasks, then 2 tasks will average 3 results each. So a last task will average the 2 last        result. Finally this last task will be the final result. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"Computation1\">\r\n      <description>\r\n        <![CDATA[ Compute Pi and return it ]]>\r\n      </description>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarlo\">\r\n        <parameters>\r\n          <parameter name=\"steps\" value=\"20\"/>\r\n          <parameter name=\"iterations\" value=\"100000000\"/>\r\n        </parameters>\r\n      </javaExecutable>\r\n    </task>\r\n    <task name=\"Computation2\">\r\n      <description>\r\n        <![CDATA[ Compute Pi and return it ]]>\r\n      </description>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarlo\">\r\n        <parameters>\r\n          <parameter name=\"steps\" value=\"20\"/>\r\n          <parameter name=\"iterations\" value=\"100000000\"/>\r\n        </parameters>\r\n      </javaExecutable>\r\n    </task>\r\n    <task name=\"Computation3\">\r\n      <description>\r\n        <![CDATA[ Compute Pi and return it ]]>\r\n      </description>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarlo\">\r\n        <parameters>\r\n          <parameter name=\"steps\" value=\"20\"/>\r\n          <parameter name=\"iterations\" value=\"100000000\"/>\r\n        </parameters>\r\n      </javaExecutable>\r\n    </task>\r\n    <task name=\"Computation4\">\r\n      <description>\r\n        <![CDATA[ Compute Pi and return it ]]>\r\n      </description>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarlo\">\r\n        <parameters>\r\n          <parameter name=\"steps\" value=\"20\"/>\r\n          <parameter name=\"iterations\" value=\"100000000\"/>\r\n        </parameters>\r\n      </javaExecutable>\r\n    </task>\r\n    <task name=\"Computation5\">\r\n      <description>\r\n        <![CDATA[ Compute Pi and return it ]]>\r\n      </description>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarlo\">\r\n        <parameters>\r\n          <parameter name=\"steps\" value=\"20\"/>\r\n          <parameter name=\"iterations\" value=\"100000000\"/>\r\n        </parameters>\r\n      </javaExecutable>\r\n    </task>\r\n    <task name=\"Computation6\">\r\n      <description>\r\n        <![CDATA[ Compute Pi and return it ]]>\r\n      </description>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarlo\">\r\n        <parameters>\r\n          <parameter name=\"steps\" value=\"20\"/>\r\n          <parameter name=\"iterations\" value=\"100000000\"/>\r\n        </parameters>\r\n      </javaExecutable>\r\n    </task>\r\n    <task name=\"Average1\">\r\n      <description>\r\n        <![CDATA[ Do the average of 1 2 3 and return it. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"Computation1\"/>\r\n        <task ref=\"Computation2\"/>\r\n        <task ref=\"Computation3\"/>\r\n      </depends>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarloAverage\"></javaExecutable>\r\n    </task>\r\n    <task name=\"Average2\">\r\n      <description>\r\n        <![CDATA[ Do the average of 4 5 6 and return it. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"Computation4\"/>\r\n        <task ref=\"Computation5\"/>\r\n        <task ref=\"Computation6\"/>\r\n      </depends>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarloAverage\"></javaExecutable>\r\n    </task>\r\n    <task name=\"LastAverage\"\r\n\r\n\r\n\r\n    preciousResult=\"true\" >\r\n      <description>\r\n        <![CDATA[ Do the average of average 1 2 and return it. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"Average1\"/>\r\n        <task ref=\"Average2\"/>\r\n      </depends>\r\n      <javaExecutable class=\"org.ow2.proactive.scheduler.examples.MonteCarloAverage\"></javaExecutable>\r\n    </task>\r\n  </taskFlow>\r\n</job>",
      "metadata": "{\"offsets\":{\"Computation1\":{\"top\":246.5,\"left\":666},\"Computation2\":{\"top\":246.5,\"left\":794},\"Computation3\":{\"top\":246.5,\"left\":922},\"Computation4\":{\"top\":246.5,\"left\":1050},\"Computation5\":{\"top\":246.5,\"left\":1178},\"Computation6\":{\"top\":246.5,\"left\":1306},\"Average1\":{\"top\":374.5,\"left\":794},\"Average2\":{\"top\":374.5,\"left\":1178},\"LastAverage\":{\"top\":502.5,\"left\":986}},\"project\":\"Big Data Workflows\"}"
    },
    {
      "id": 1,
      "name": "Pre-Post-Clean Scripts",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.2\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.2 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.2/schedulerjob.xsd\"\r\n    name=\"Pre-Post-Clean Scripts\" projectName=\"Basic Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"false\">\r\n  <description>\r\n    <![CDATA[ Extra scripts are available to decorate a task with custom behavior.        Pre and post scripts are executed before and after a task.        A Clean script is executed even if the task failed. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"task_with_scripts\">\r\n      <pre>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"A pre script can be used to prepare the environment\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </pre>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"A task is running\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <post>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"A post script could be used to process the result of a native executable without adding an extra task\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </post>\r\n    </task>\r\n    <task name=\"failing_task\">\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nthrow new Exception(\"Failing task!\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <cleaning>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"The clean script is ran on the node whatever the task's status\"\r\n                        // this output won't be visible in the task's logs\r\n]]>\r\n          </code>\r\n        </script>\r\n      </cleaning>\r\n    </task>\r\n  </taskFlow>\r\n</job>",
      "metadata": "{\"offsets\":{\"task_with_scripts\":{\"top\":547,\"left\":922},\"failing_task\":{\"top\":547,\"left\":1050}},\"project\":\"Basic Workflows\"}"
    },
    {
      "id": 9,
      "name": "Docker Exec. Env.",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<job\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns=\"urn:proactive:jobdescriptor:3.3\"\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.3 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.3/schedulerjob.xsd\"\n    name=\"Docker Exec. Env.\" projectName=\"Cloud Automation\"\n    priority=\"normal\"\n    cancelJobOnError=\"false\"\n>\n  <description>\n    <![CDATA[ This workflow demonstrates the usage of a Docker Fork Execution Environment. Including the usage of variables passing and Dataspaces ]]>\n  </description>\n  <taskFlow>\n    <task name=\"CheckoutProactiveScheduling\"\n>\n      <description>\n        <![CDATA[ The simplest task, ran by a bash engine. ]]>\n      </description>\n      <forkEnvironment javaHome=\"/usr\" >\n        <envScript>\n          <script>\n            <code language=\"python\">\n              <![CDATA[\n# Prepare Docker parameters \ncontainerName = 'java' \ndockerRunCommand =  'docker run ' \ndockerParameters = '--rm ' \n# Prepare ProActive home volume \npaHomeHost = variables.get(\"PA_SCHEDULER_HOME\") \npaHomeContainer = variables.get(\"PA_SCHEDULER_HOME\") \nproActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' \n# Prepare working directory (For Dataspaces and serialized task file) \nworkspaceHost = localspace \nworkspaceContainer = localspace \nworkspaceVolume = '-v '+localspace +':'+localspace+' ' \n# Prepare container working directory \ncontainerWorkingDirectory = '-w '+workspaceContainer+' ' \n# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node \npreJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName \n]]>\n            </code>\n          </script>\n        </envScript>\n      </forkEnvironment>\n      <scriptExecutable>\n        <script>\n          <code language=\"bash\">\n            <![CDATA[\necho '---------------------- Execute a task inside a Docker Container Example -----------------------------'\necho '---------------------- Start Task No. 1 ---------------------------------------------------------'\necho 'This task runs inside a Docker container. It can install new software or change software versions without impacting other software or tasks.'\necho \"Now, lets install git in this container by executing 'apt-get install git -y'.\"\necho \"We could clone a git repo.\"\necho 'Lets pretend we created some statistics about this git repo, we save it in a file (stats.log).'\necho \"In the 'Data Management' tab, the stats.log file is setup to be transferred between tasks.\"\necho \"This is a statistic, 1,2,3,4,5,6,7,8. Saved in stats.log.\" > stats.log\n]]>\n          </code>\n        </script>\n      </scriptExecutable>\n      <controlFlow block=\"none\"></controlFlow>\n      <outputFiles>\n        <files  includes=\"stats.log\" accessMode=\"transferToUserSpace\"/>\n      </outputFiles>\n    </task>\n    <task name=\"Print_settings.properties\"\n>\n      <description>\n        <![CDATA[ The simplest task, ran by a bash engine. ]]>\n      </description>\n      <depends>\n        <task ref=\"CheckoutProactiveScheduling\"/>\n      </depends>\n      <inputFiles>\n        <files  includes=\"stats.log\" accessMode=\"transferFromUserSpace\"/>\n      </inputFiles>\n      <scriptExecutable>\n        <script>\n          <code language=\"python\">\n            <![CDATA[\nprint '---------------------- Start Task No. 2 ---------------------------------------------------------'\nprint \"This task receives a file from its preceding task, statsfile.log. It was configured in the 'Data Management' tab to do so.\"\nwith open('stats.log', 'r') as statsfile:\n    variables.put('statsfile',statsfile.read())\nprint 'The file was read and put into the variables map. Variables which are placed inside the variables map are transferred along tasks. Those are accessible and changeable inside preceding tasks.\n]]>\n          </code>\n        </script>\n      </scriptExecutable>\n      <controlFlow block=\"none\"></controlFlow>\n    </task>\n    <task name=\"Linux_Bash_Task\"\n>\n      <description>\n        <![CDATA[ The simplest task, ran by a bash engine. ]]>\n      </description>\n      <depends>\n        <task ref=\"Print_settings.properties\"/>\n      </depends>\n      <scriptExecutable>\n        <script>\n          <code language=\"bash\">\n            <![CDATA[\necho '---------------------- Start Task No. 3 ---------------------------------------------------------'\necho \"Print the content of the file from a variable. The variable was created in one of the succeeding tasks in a python script. Variables which are saved in the variables map are passed along tasks. So now we can access the output of the python script in this bash script. Which is: \"\necho $variables_statsfile\n]]>\n          </code>\n        </script>\n      </scriptExecutable>\n      <controlFlow block=\"none\"></controlFlow>\n    </task>\n  </taskFlow>\n</job>",
      "metadata": "{\"offsets\":{\"Docker_Exec_Env\":{\"top\":374.5,\"left\":986}},\"project\":\"Cloud Automation\"}"
    },
    {
      "id": 6,
      "name": "Multi-Node Task",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.2\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.2 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.2/schedulerjob.xsd\"\r\n    name=\"Multi-Node Task\" projectName=\"Advanced Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"false\">\r\n  <description>\r\n    <![CDATA[ A multinode task will reserve several nodes and expose them to the task.        It is often used to run MPI jobs or task that use the ProActive Java API. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"MultiNodeTask\">\r\n      <parallel numberOfNodes=\"4\"></parallel>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln (nodesurl.size() + 1) + \" nodes have been reserved\"\r\n                        println \"The other reserved nodes are accessible there \" + nodesurl\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n    </task>\r\n  </taskFlow>\r\n</job>",
      "metadata": "{\"offsets\":{\"MultiNodeTask\":{\"top\":374.5,\"left\":986}},\"project\":\"Advanced Workflows\"}"
    },
    {
      "id": 5,
      "name": "Data Management",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.2\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.2 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.2/schedulerjob.xsd\"\r\n    name=\"Data Management\" projectName=\"Advanced Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"false\">\r\n  <description>\r\n    <![CDATA[ Dataspaces are automatically started with the Scheduler.        Here we write a file in a task and transfer it to the userspace.        Then in a dependent task, we transfer the file from the userspace and read it.        Patterns can be used to include or exclude input/output files. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"create_file_in_userspace\">\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nnew File(\"a_file.txt\") << \"Hello World\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <outputFiles>\r\n        <files  includes=\"a_file.txt\" accessMode=\"transferToUserSpace\"/>\r\n      </outputFiles>\r\n    </task>\r\n    <task name=\"read_file_from_userspace\">\r\n      <depends>\r\n        <task ref=\"create_file_in_userspace\"/>\r\n      </depends>\r\n      <inputFiles>\r\n        <files  includes=\"*.txt\" accessMode=\"transferFromUserSpace\"/>\r\n      </inputFiles>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln new File(\"a_file.txt\").text\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n    </task>\r\n  </taskFlow>\r\n</job>",
      "metadata": "{\"offsets\":{\"create_file_in_userspace\":{\"top\":310.5,\"left\":986},\"read_file_from_userspace\":{\"top\":438.5,\"left\":986}},\"project\":\"Advanced Workflows\"}"
    },
    {
      "id": 3,
      "name": "Variables Propagation\r\n",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.3\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.3 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.3/schedulerjob.xsd\"\r\n    name=\"Variables Propagation\" projectName=\"Basic Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"false\">\r\n  <variables>\r\n    <variable name=\"numberOfLights\" value=\"1\"/>\r\n    <variable name=\"minRequiredAngle\" value=\"120\"/>\r\n    <variable name=\"coveredAnglePerLight\" value=\"90\"/>\r\n    <variable name=\"currentCoverage\" value=\"0\"/>\r\n  </variables>\r\n  <description>\r\n    <![CDATA[ Demonstrate how variables can be read/written to in different script tasks. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"DisplayContext\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a groovy engine. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"Start\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"This workflow will calculate the maximum angular coverage according to the number of lights and their\"\r\nprintln \"covering angle defined in the Job Variables.\"\r\n\r\nInteger coveredAnglePerLight=variables.get(\"coveredAnglePerLight\").toInteger()\r\nInteger numberOfLights=variables.get(\"numberOfLights\").toInteger()\r\nInteger minRequiredAngle=variables.get(\"minRequiredAngle\").toInteger()\r\n\r\nprintln \" \"\r\nprintln \"You chose to use: \"+numberOfLights+ \" light(s).\"\r\nprintln \"Each light might cover: \"+coveredAnglePerLight+\" degrees.\"\r\nprintln \"You want to cover an angle of: \"+minRequiredAngle+\" degrees.\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"start\"></controlFlow>\r\n    </task>\r\n    <task name=\"Condition\">\r\n      <depends>\r\n        <task ref=\"ComputeNewCoverage\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprint \"\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow >\r\n        <if target=\"If\"\r\n        else=\"Else\"\r\n        continuation=\"Continuation\">\r\n          <script>\r\n            <code language=\"groovy\">\r\n              <![CDATA[\r\nInteger currentCoverage=variables.get(\"currentCoverage\").toInteger()\r\nInteger coveredAnglePerLight=variables.get(\"coveredAnglePerLight\").toInteger()\r\nInteger numberOfLights=variables.get(\"numberOfLights\").toInteger()\r\nInteger minRequiredAngle=variables.get(\"minRequiredAngle\").toInteger()\r\nInteger i=(numberOfLights * coveredAnglePerLight)\r\n\r\nprintln \" \"\r\n\r\n\r\nif(currentCoverage <= minRequiredAngle)\r\n{\r\n    branch = \"if\";\r\n} else {\r\n    branch = \"else\";\r\n}\r\n]]>\r\n            </code>\r\n          </script>\r\n        </if>\r\n      </controlFlow>\r\n    </task>\r\n    <task name=\"If\">\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"You haven't enough lights!\"\r\n\r\nInteger numberOfLights=variables.get(\"numberOfLights\").toInteger()\r\nnumberOfLights++\r\nvariables.put(\"numberOfLights\", numberOfLights)\r\n\r\nprintln \" \"\r\nprintln \"Adding one more light...\"\r\nprintln \"We will now try with \"+numberOfLights+\" lights!\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"Else\">\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"You have enough lights!\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"Continuation\">\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nInteger currentCoverage=variables.get(\"currentCoverage\").toInteger()\r\nInteger coveredAnglePerLight=variables.get(\"coveredAnglePerLight\").toInteger()\r\nInteger numberOfLights=variables.get(\"numberOfLights\").toInteger()\r\nInteger minRequiredAngle=variables.get(\"minRequiredAngle\").toInteger()\r\n\r\nprintln \" \"\r\nprintln \"With \"+numberOfLights+ \" lights, you can cover \"+currentCoverage+\" degrees maximum.\"\r\nprintln \"You wanted to cover \"+minRequiredAngle+\" degrees.\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"ComputeNewCoverage\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a groovy engine. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"DisplayContext\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nInteger currentCoverage=variables.get(\"currentCoverage\").toInteger()\r\nInteger coveredAnglePerLight=variables.get(\"coveredAnglePerLight\").toInteger()\r\nInteger numberOfLights=variables.get(\"numberOfLights\").toInteger()\r\nInteger minRequiredAngle=variables.get(\"minRequiredAngle\").toInteger()\r\n\r\nprintln \"Calculation in progress...\"\r\n\r\nInteger i=(numberOfLights * coveredAnglePerLight)\r\nvariables.put(\"currentCoverage\", i)\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"Start\">\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"Hello!\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"Loop\">\r\n      <depends>\r\n        <task ref=\"Continuation\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nprintln \"Loop in progress...\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow  block=\"end\">\r\n        <loop target=\"DisplayContext\">\r\n          <script>\r\n            <code language=\"groovy\">\r\n              <![CDATA[\r\nInteger currentCoverage=variables.get(\"currentCoverage\").toInteger()\r\nInteger minRequiredAngle=variables.get(\"minRequiredAngle\").toInteger()\r\n\r\nif(currentCoverage < minRequiredAngle) {\r\n    loop = true;\r\n} else {\r\n    loop = false;\r\n}\r\n]]>\r\n            </code>\r\n          </script>\r\n        </loop>\r\n      </controlFlow>\r\n    </task>\r\n    <task name=\"Groovy_Task3\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a groovy engine. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"Loop\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"groovy\">\r\n            <![CDATA[\r\nInteger currentCoverage=variables.get(\"currentCoverage\").toInteger()\r\nInteger coveredAnglePerLight=variables.get(\"coveredAnglePerLight\").toInteger()\r\nInteger numberOfLights=variables.get(\"numberOfLights\").toInteger()\r\nInteger minRequiredAngle=variables.get(\"minRequiredAngle\").toInteger()\r\n\r\nprintln \" \"\r\nprintln \"With \"+numberOfLights+\" lights, you have enough lights to cover \"+minRequiredAngle+\" degrees.\"\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n  </taskFlow>\r\n</job>\r\n",
      "metadata": "{\"offsets\":{},\"project\":\"Basic Workflows\"}\r\n"
    },
    {
      "id": 8,
      "name": "Cloud Automation",
      "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<job\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"urn:proactive:jobdescriptor:3.2\"\r\n     xsi:schemaLocation=\"urn:proactive:jobdescriptor:3.2 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.2/schedulerjob.xsd\"\r\n    name=\"Cloud Automation\" projectName=\"Advanced Workflows\"\r\n    priority=\"normal\"\r\n    cancelJobOnError=\"false\">\r\n  <description>\r\n    <![CDATA[ A workflow that simulates cloud automation. ]]>\r\n  </description>\r\n  <taskFlow>\r\n    <task name=\"CreateDataBaseVM\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a javascript engine. ]]>\r\n      </description>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"javascript\">\r\n            <![CDATA[\r\nprint(\"Creating database VM\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"CreateApplicationVM\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a javascript engine. ]]>\r\n      </description>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"javascript\">\r\n            <![CDATA[\r\nprint(\"Creating application VM\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"ConfigureApplication\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a javascript engine. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"CreateApplicationVM\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"javascript\">\r\n            <![CDATA[\r\nprint(\"Configuring application\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"RunApplication\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a javascript engine. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"ConfigDatabase\"/>\r\n        <task ref=\"ConfigureApplication\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"javascript\">\r\n            <![CDATA[\r\nprint(\"Running application\")\r\njava.lang.Thread.sleep(60000)\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n    <task name=\"ConfigDatabase\">\r\n      <description>\r\n        <![CDATA[ The simplest task, ran by a javascript engine. ]]>\r\n      </description>\r\n      <depends>\r\n        <task ref=\"CreateDataBaseVM\"/>\r\n      </depends>\r\n      <scriptExecutable>\r\n        <script>\r\n          <code language=\"javascript\">\r\n            <![CDATA[\r\nprint(\"Configuring database VM\")\r\n]]>\r\n          </code>\r\n        </script>\r\n      </scriptExecutable>\r\n      <controlFlow block=\"none\"></controlFlow>\r\n    </task>\r\n  </taskFlow>\r\n</job>",
      "metadata": "{\"offsets\":{\"CreateDataBaseVM\":{\"top\":419,\"left\":922},\"CreateApplicationVM\":{\"top\":419,\"left\":1050},\"ConfigureApplication\":{\"top\":547,\"left\":1050},\"RunApplication\":{\"top\":675,\"left\":986},\"ConfigDatabase\":{\"top\":547,\"left\":922}},\"project\":\"Advanced Workflows\"}"
    }
  ],
  "workflows": []
}