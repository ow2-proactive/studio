<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.12"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd"
	name="Submit_And_Wait_For_Any" priority="normal" onTaskError="continueJobExecution"
	maxNumberOfExecution="2">
	<variables>
		<variable name="taskNames" value="Average1,Average2"/>
		<variable name="bucket_name" value="basic-examples"/>
		<variable name="workflow_name" value="Distributed_Computing_Pi"/>
		<variable name="workflow_variables_json" value="{}"/>
	</variables>
	<description>
    <![CDATA[ Submit a processing workflow, and wait for one task from the taskNames list to finish before continuing. ]]>
	</description>
	<genericInformation>
		<info name="workflow.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_and_wait_for_any.png" />
	</genericInformation>
	<taskFlow>
		<task name="Submit">
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_and_wait_for_any.png" />
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
println "Submitting a processing job ..."

// Retrieve some variables
def PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
def bucket_name = variables.get("bucket_name")
def workflow_name = variables.get("workflow_name")
def workflow_variables_json = variables.get("workflow_variables_json")

// From variables json to map
def slurper = new groovy.json.JsonSlurper()
def variables_map = (Map) slurper.parseText(workflow_variables_json)

// submitting the job
schedulerapi.connect()
def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
def job_id = schedulerapi.submitFromCatalog(PA_CATALOG_REST_URL, bucket_name, workflow_name, variables_map, generic_infos_map)

variables.put("jobID", job_id)
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="Wait_For_Task">
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_and_wait_for_any.png" />
			</genericInformation>
			<depends>
				<task ref="Submit" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
def tasks_names = variables["taskNames"]
def job_id = variables["jobID"]

schedulerapi.connect()

// Wait any task end if no tasks_names
if (!tasks_names)
{
  println "(waiting for a task to finish)"
  while(schedulerapi.getJobInfo(job_id).getNumberOfFinishedTasks() == 0)
  	sleep(1000)
}
else // Wait one of the tasks_names end
{
  def tasks_names_list = variables["taskNames"].split(",") as List
  def time_out_in_sec = 30
  println "(waiting for a task in " + tasks_names_list + " to finish)"
  schedulerapi.waitForAnyTask(job_id.value(), tasks_names_list, time_out_in_sec * 1000)
}


variables["isFinished"] = "yes"
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow>
				<loop target="Wait_For_Task">
					<script>
						<code language="javascript">
              <![CDATA[
// You can use a Cron Expression here
              // examples http://www.sauronsoftware.it/projects/cron4j/manual.php#p02
if(!variables.get("isFinished")){
	loop = '* * * * *';
}else{
	loop = false;
}
]]>
						</code>
					</script>
				</loop>
			</controlFlow>
		</task>
		<task name="Next_process">
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_and_wait_for_any.png" />
			</genericInformation>
			<depends>
				<task ref="Wait_For_Task" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
println "... " + variables.get("PA_TASK_NAME")
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>